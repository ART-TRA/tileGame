[{"D:\\LetsPlayAGame\\letsplayagame\\src\\index.js":"1","D:\\LetsPlayAGame\\letsplayagame\\src\\App.js":"2","D:\\LetsPlayAGame\\letsplayagame\\src\\reportWebVitals.js":"3","D:\\LetsPlayAGame\\letsplayagame\\src\\gameState.js":"4","D:\\LetsPlayAGame\\letsplayagame\\src\\Tile.jsx":"5","D:\\LetsPlayAGame\\letsplayagame\\src\\gameReducer.js":"6"},{"size":593,"mtime":1610569933725,"results":"7","hashOfConfig":"8"},{"size":4405,"mtime":1610699281102,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":3671,"mtime":1610693206441,"results":"11","hashOfConfig":"8"},{"size":1622,"mtime":1610691379851,"results":"12","hashOfConfig":"8"},{"size":6529,"mtime":1610693206456,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"18f7ywc",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"D:\\LetsPlayAGame\\letsplayagame\\src\\index.js",[],["28","29"],"D:\\LetsPlayAGame\\letsplayagame\\src\\App.js",[],"D:\\LetsPlayAGame\\letsplayagame\\src\\reportWebVitals.js",[],"D:\\LetsPlayAGame\\letsplayagame\\src\\gameState.js",[],"D:\\LetsPlayAGame\\letsplayagame\\src\\Tile.jsx",["30"],"D:\\LetsPlayAGame\\letsplayagame\\src\\gameReducer.js",["31","32","33","34"],"const SHOW_COLOR = \"SHOW_COLOR\"\r\nconst CHECK_COLOR = \"CHECK_COLOR\"\r\nconst WAITING_COLOR = \"WAITING_COLOR\"\r\nconst RESTART_GAME = \"RESTART_GAME\"\r\n\r\nexport const showColor = (id) => ({type: SHOW_COLOR, id})\r\nexport const checkColor = (id) => ({type: CHECK_COLOR, id})\r\nexport const restartGame = () => ({type: RESTART_GAME})\r\nexport const waitingColor = () => ({type: WAITING_COLOR})\r\n\r\nexport const gameReducer = (state, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case CHECK_COLOR: {\r\n            console.log(state.currentTile);\r\n            const tile = state.tiles.find(tile => tile.id === action.id)\r\n            //защита от нажатия на одну и ту же плитку\r\n            // if(state.currentTile.find(currTile => currTile.id === action.id)){\r\n            //     return state\r\n            // }\r\n            if (state.currentTile.length === 2) {\r\n                //     return {\r\n                //         ...state,\r\n                //         visible: tile.visible = true,\r\n                //         currentTile: [...state.currentTile, tile],\r\n                //     }\r\n                // } else {\r\n                //     state.currentTile.push(tile)\r\n                const newStep = state.steps - 1\r\n                //если плитки равны по цвету\r\n                if (state.currentTile[0].colorNum === state.currentTile[1].colorNum) {\r\n                    const newMatch = state.matches + 1\r\n                    return {\r\n                        ...state,\r\n                        steps: newStep,\r\n                        matches: newMatch,\r\n                        tiles: state.tiles.map(tile => {\r\n                            if (tile.id === state.currentTile[0].id || tile.id === state.currentTile[1].id) {\r\n                                return {\r\n                                    ...tile,\r\n                                    visible: true,\r\n                                    tileState: \"disappear\",\r\n\r\n                                }\r\n                            }\r\n                            return tile\r\n                        }),\r\n                        currentTile: []\r\n                    }\r\n                    //если плитки не равны по цвету\r\n                } else {\r\n                    return {\r\n                        ...state,\r\n                        steps: newStep,\r\n                        tiles: state.tiles.map(tile => {\r\n                            if (tile.id === state.currentTile[0].id || tile.id === state.currentTile[1].id) {\r\n                                return {...tile, tileState: \"disable\", visible: false}\r\n                            }\r\n                            return tile\r\n                        }),\r\n                        currentTile: []\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        case SHOW_COLOR: {\r\n            const tile = state.tiles.find(tile => tile.id === action.id)\r\n            if (state.currentTile.find(currTile => currTile.id === action.id)) {\r\n                return state\r\n            }\r\n            return {\r\n                ...state,\r\n                visible: tile.visible = true,\r\n                currentTile: [...state.currentTile, tile],\r\n                tiles: state.tiles.map(tile => {\r\n                    if (tile.id !== action.id && tile.tileState === \"able\") {\r\n                        return {...tile, tileState: \"waiting\", visible: false}\r\n                    }\r\n                    return tile\r\n                }),\r\n            }\r\n\r\n        }\r\n        case WAITING_COLOR: {\r\n            //защита от слишком быстрого нажимания\r\n            return {\r\n                ...state,\r\n                tiles: state.tiles.map(tile => {\r\n                    if (tile.tileState === \"waiting\") {\r\n                        return {...tile, tileState: \"able\", visible: false}\r\n                    }\r\n                    return tile\r\n                }),\r\n            }\r\n        }\r\n        case RESTART_GAME: {\r\n            // const initTiles = state.tiles.map(tile => {\r\n            //     tile.visible = false\r\n            //     tile.tileState = \"able\"\r\n            // })\r\n            return {\r\n                ...state,\r\n                steps: 8,\r\n                matches: 0,\r\n                currentTile: [],\r\n                tiles: state.tiles.map(tile => {\r\n                    return {...tile, tileState: \"able\", visible: false}\r\n                }),\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// case CHECK_COLOR: {\r\n//     const tile = state.tiles.find(tile => tile.id === action.id)\r\n//     //защита от нажатия на одну и ту же плитку\r\n//     if(state.currentTile.find(currTile => currTile.id === action.id)){\r\n//         return state\r\n//     }\r\n//     if (state.currentTile.length === 0) {\r\n//         return {\r\n//             ...state,\r\n//             visible: tile.visible = true,\r\n//             currentTile: [...state.currentTile, tile],\r\n//         }\r\n//     } else {\r\n//         state.currentTile.push(tile)\r\n//         const newStep = state.steps - 1\r\n//         //если плитки равны по цвету\r\n//         if (state.currentTile[0].colorNum === state.currentTile[1].colorNum) {\r\n//             return {\r\n//                 ...state,\r\n//                 steps: newStep,\r\n//                 tiles: state.tiles.map(tile => {\r\n//                     if (tile.id === state.currentTile[0].id || tile.id === state.currentTile[1].id) {\r\n//                         return {\r\n//                             ...tile,\r\n//                             visible: true,\r\n//                             tileState: \"disappear\",\r\n//\r\n//                         }\r\n//                     }\r\n//                     return tile\r\n//                 }),\r\n//                 currentTile: []\r\n//             }\r\n//             //если плитки не равны по цвету\r\n//         } else {\r\n//             return {\r\n//                 ...state,\r\n//                 steps: newStep,\r\n//                 tiles: state.tiles.map(tile => {\r\n//                     if (tile.id === state.currentTile[0].id || tile.id === state.currentTile[1].id) {\r\n//                         return {...tile, tileState: \"disable\", visible: false}\r\n//                     }\r\n//                     return tile\r\n//                 }),\r\n//                 currentTile: []\r\n//             }\r\n//         }\r\n//     }\r\n// }",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":28,"nodeType":"41","messageId":"42","endLine":1,"endColumn":36},{"ruleId":"39","severity":1,"message":"43","line":16,"column":19,"nodeType":"41","messageId":"42","endLine":16,"endColumn":23},{"ruleId":"44","severity":1,"message":"45","line":66,"column":9,"nodeType":"46","messageId":"47","endLine":83,"endColumn":10},{"ruleId":"39","severity":1,"message":"48","line":97,"column":19,"nodeType":"41","messageId":"42","endLine":97,"endColumn":28},{"ruleId":"49","severity":1,"message":"50","line":97,"column":52,"nodeType":"51","messageId":"52","endLine":97,"endColumn":54},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'tile' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'initTiles' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]